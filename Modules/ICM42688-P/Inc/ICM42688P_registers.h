/****************************************************************************
 *
 *   Copyright (c) 2020 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/**
 * @file InvenSense_ICM42688P_registers.h
 *
 * Invensense ICM-42688-P registers.
 *
 */

#ifndef _INV_ICM42688P_REGISTERS_H
#define _INV_ICM42688P_REGISTERS_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>

#define Bit0 (1 << 0)
#define Bit1 (1 << 1)
#define Bit2 (1 << 2)
#define Bit3 (1 << 3)
#define Bit4 (1 << 4)
#define Bit5 (1 << 5)
#define Bit6 (1 << 6)
#define Bit7 (1 << 7)

#define SPI_SPEED (24 * 1000 * 1000) // 24 MHz SPI
#define DIR_READ 0x80

#define WHOAMI 0x47
#define WHOAMI686 0x44

#define TEMPERATURE_SENSITIVITY 132.48f // LSB/C
#define TEMPERATURE_OFFSET 25.f // C

typedef enum {
	BANK_0_DEVICE_CONFIG = 0x11,
	BANK_0_INT_CONFIG = 0x14,
	BANK_0_FIFO_CONFIG = 0x16,
	BANK_0_TEMP_DATA1 = 0x1D,
	BANK_0_TEMP_DATA0 = 0x1E,
	BANK_0_INT_STATUS = 0x2D,
	BANK_0_FIFO_COUNTH = 0x2E,
	BANK_0_FIFO_COUNTL = 0x2F,
	BANK_0_FIFO_DATA = 0x30,
	BANK_0_SIGNAL_PATH_RESET = 0x4B,
	BANK_0_INTF_CONFIG0 = 0x4C,
	BANK_0_INTF_CONFIG1 = 0x4D,
	BANK_0_PWR_MGMT0 = 0x4E,
	BANK_0_GYRO_CONFIG0 = 0x4F,
	BANK_0_ACCEL_CONFIG0 = 0x50,
	BANK_0_GYRO_CONFIG1 = 0x51,
	BANK_0_GYRO_ACCEL_CONFIG0 = 0x52,
	BANK_0_ACCEL_CONFIG1 = 0x53,
	BANK_0_TMST_CONFIG = 0x54,
	BANK_0_FIFO_CONFIG1 = 0x5F,
	BANK_0_FIFO_CONFIG2 = 0x60,
	BANK_0_FIFO_CONFIG3 = 0x61,
	BANK_0_INT_CONFIG0 = 0x63,
	BANK_0_INT_CONFIG1 = 0x64,
	BANK_0_INT_SOURCE0 = 0x65,
	BANK_0_SELF_TEST_CONFIG = 0x70,
	BANK_0_WHO_AM_I = 0x75,
	BANK_0_REG_BANK_SEL = 0x76,
} BANK_0;

typedef enum {
	BANK_1_GYRO_CONFIG_STATIC2 = 0x0B,
	BANK_1_GYRO_CONFIG_STATIC3 = 0x0C,
	BANK_1_GYRO_CONFIG_STATIC4 = 0x0D,
	BANK_1_GYRO_CONFIG_STATIC5 = 0x0E,
	BANK_1_INTF_CONFIG5 = 0x7B,
} BANK_1;

typedef enum {
	BANK_2_ACCEL_CONFIG_STATIC2 = 0x03,
	BANK_2_ACCEL_CONFIG_STATIC3 = 0x04,
	BANK_2_ACCEL_CONFIG_STATIC4 = 0x05,
} BANK_2;

//---------------- BANK0 Register bits

// DEVICE_CONFIG
typedef enum {
	DEVICE_CONFIG_BIT_SOFT_RESET_CONFIG = Bit0,
} DEVICE_CONFIG_BIT;

// INT_CONFIG
typedef enum {
	INT_CONFIG_BIT_INT1_MODE = Bit2,
	INT_CONFIG_BIT_INT1_DRIVE_CIRCUIT = Bit1,
	INT_CONFIG_BIT_INT1_POLARITY = Bit0,
} INT_CONFIG_BIT;

// FIFO_CONFIG
typedef enum {
	FIFO_CONFIG_BIT_FIFO_MODE_STOP_ON_FULL = Bit7 | Bit6,
} FIFO_CONFIG_BIT;

// INT_STATUS
typedef enum {
	INT_STATUS_BIT_RESET_DONE_INT = Bit4,
	INT_STATUS_BIT_DATA_RDY_INT = Bit3,
	INT_STATUS_BIT_FIFO_THS_INT = Bit2,
	INT_STATUS_BIT_FIFO_FULL_INT = Bit1,
} INT_STATUS_BIT;

// SIGNAL_PATH_RESET
typedef enum {
	SIGNAL_PATH_RESET_BIT_ABORT_AND_RESET = Bit3,
	SIGNAL_PATH_RESET_BIT_FIFO_FLUSH = Bit1,
} SIGNAL_PATH_RESET_BIT;

// INTF_CONFIG0
typedef enum {
	INTF_CONFIG0_BIT_FIFO_HOLD_LAST_DATA_EN = Bit7,
	INTF_CONFIG0_BIT_FIFO_COUNT_REC = Bit6,
	INTF_CONFIG0_BIT_FIFO_COUNT_ENDIAN = Bit5,
	INTF_CONFIG0_BIT_SENSOR_DATA_ENDIAN = Bit4,
	INTF_CONFIG0_BIT_UI_SIFS_CFG_DISABLE_I2C = Bit1 | Bit0,
} INTF_CONFIG0_BIT;

// INTF_CONFIG1
typedef enum {
	INTF_CONFIG1_BIT_AFSR_CLEAR = Bit7,
	INTF_CONFIG1_BIT_AFSR_SET = Bit6,
	INTF_CONFIG1_BIT_RTC_MODE = Bit2,
	INTF_CONFIG1_BIT_CLKSEL = Bit0,
	INTF_CONFIG1_BIT_CLKSEL_CLEAR = Bit1,
} INTF_CONFIG1_BIT;

// PWR_MGMT0
typedef enum {
	PWR_MGMT0_BIT_GYRO_MODE_LOW_NOISE = Bit3 | Bit2,
	PWR_MGMT0_BIT_ACCEL_MODE_LOW_NOISE = Bit1 | Bit0,
} PWR_MGMT0_BIT;

// GYRO_CONFIG0
typedef enum {
	GYRO_CONFIG0_BIT_GYRO_FS_SEL_2000_DPS = 0,
	GYRO_CONFIG0_BIT_GYRO_FS_SEL_1000_DPS = Bit5,
	GYRO_CONFIG0_BIT_GYRO_FS_SEL_500_DPS = Bit6,
	GYRO_CONFIG0_BIT_GYRO_FS_SEL_250_DPS = Bit6 | Bit5,
	GYRO_CONFIG0_BIT_GYRO_FS_SEL_125_DPS = Bit7,
	GYRO_CONFIG0_BIT_GYRO_ODR_32KHZ_SET = Bit0,
	GYRO_CONFIG0_BIT_GYRO_ODR_32KHZ_CLEAR = Bit3 | Bit2 | Bit0,
	GYRO_CONFIG0_BIT_GYRO_ODR_16KHZ_SET = Bit1,
	GYRO_CONFIG0_BIT_GYRO_ODR_16KHZ_CLEAR = Bit3 | Bit2 | Bit0,
	GYRO_CONFIG0_BIT_GYRO_ODR_8KHZ_SET = Bit1 | Bit0,
	GYRO_CONFIG0_BIT_GYRO_ODR_8KHZ_CLEAR = Bit3 | Bit2,
	GYRO_CONFIG0_BIT_GYRO_ODR_1KHZ_SET = Bit2 | Bit1,
	GYRO_CONFIG0_BIT_GYRO_ODR_1KHZ_CLEAR = Bit3 | Bit0,
	GYRO_CONFIG0_BIT_GYRO_ODR_100HZ_SET = Bit3,
	GYRO_CONFIG0_BIT_GYRO_ODR_100HZ_CLEAR = Bit2 | Bit1 | Bit0,
} GYRO_CONFIG0_BIT;

// ACCEL_CONFIG0
typedef enum {
	ACCEL_CONFIG0_BIT_ACCEL_FS_SEL_16G = 0,
	ACCEL_CONFIG0_BIT_ACCEL_FS_SEL_8G = Bit5,
	ACCEL_CONFIG0_BIT_ACCEL_FS_SEL_4G = Bit6,
	ACCEL_CONFIG0_BIT_ACCEL_FS_SEL_2G = Bit6 | Bit5,
	ACCEL_CONFIG0_BIT_ACCEL_ODR_32KHZ_SET = Bit0,
	ACCEL_CONFIG0_BIT_ACCEL_ODR_32KHZ_CLEAR = Bit3 | Bit2 | Bit0,
	ACCEL_CONFIG0_BIT_ACCEL_ODR_16KHZ_SET = Bit1,
	ACCEL_CONFIG0_BIT_ACCEL_ODR_16KHZ_CLEAR = Bit3 | Bit2 | Bit0,
	ACCEL_CONFIG0_BIT_ACCEL_ODR_8KHZ_SET = Bit1 | Bit0,
	ACCEL_CONFIG0_BIT_ACCEL_ODR_8KHZ_CLEAR = Bit3 | Bit2,
	ACCEL_CONFIG0_BIT_ACCEL_ODR_1KHZ_SET = Bit2 | Bit1,
	ACCEL_CONFIG0_BIT_ACCEL_ODR_1KHZ_CLEAR = Bit3 | Bit0,
	ACCEL_CONFIG0_BIT_ACCEL_ODR_100HZ_SET = Bit3,
	ACCEL_CONFIG0_BIT_ACCEL_ODR_100HZ_CLEAR = Bit2 | Bit1 | Bit0,
} ACCEL_CONFIG0_BIT;

// GYRO_CONFIG1
typedef enum {
	GYRO_CONFIG1_BIT_GYRO_UI_FILT_ORD = Bit3 | Bit2,
} GYRO_CONFIG1_BIT;

// GYRO_ACCEL_CONFIG0
typedef enum {
	GYRO_ACCEL_CONFIG0_BIT_ACCEL_UI_FILT_BW = Bit7 | Bit6 | Bit5 | Bit4,
	GYRO_ACCEL_CONFIG0_BIT_GYRO_UI_FILT_BW = Bit3 | Bit2 | Bit1 | Bit0,
} GYRO_ACCEL_CONFIG0_BIT;

// ACCEL_CONFIG1
typedef enum {
	ACCEL_CONFIG1_BIT_ACCEL_UI_FILT_ORD = Bit4 | Bit3,
} ACCEL_CONFIG1_BIT;

// TMST_CONFIG
typedef enum {
	TMST_CONFIG_BIT_TMST_TO_REGS_EN = Bit4,
	TMST_CONFIG_BIT_TMST_RES = Bit3,
	TMST_CONFIG_BIT_TMST_DELTA_EN = Bit2,
	TMST_CONFIG_BIT_TMST_FSYNC_EN = Bit1,
	TMST_CONFIG_BIT_TMST_EN = Bit0,
} TMST_CONFIG_BIT;

// FIFO_CONFIG1
typedef enum {
	FIFO_CONFIG1_BIT_FIFO_RESUME_PARTIAL_RD = Bit6,
	FIFO_CONFIG1_BIT_FIFO_WM_GT_TH = Bit5,
	FIFO_CONFIG1_BIT_FIFO_HIRES_EN = Bit4,
	FIFO_CONFIG1_BIT_FIFO_TMST_FSYNC_EN = Bit3,
	FIFO_CONFIG1_BIT_FIFO_TEMP_EN = Bit2,
	FIFO_CONFIG1_BIT_FIFO_GYRO_EN = Bit1,
	FIFO_CONFIG1_BIT_FIFO_ACCEL_EN = Bit0,
} FIFO_CONFIG1_BIT;

// INT_CONFIG0
typedef enum {
	INT_CONFIG0_BIT_CLEAR_ON_FIFO_READ = Bit3,
} INT_CONFIG0_BIT;

// INT_CONFIG1
typedef enum {
	INT_CONFIG1_BIT_INT_ASYNC_RESET = Bit4,
} INT_CONFIG1_BIT;

// INT_SOURCE0
typedef enum {
	INT_SOURCE0_BIT_UI_FSYNC_INT1_EN = Bit6,
	INT_SOURCE0_BIT_PLL_RDY_INT1_EN = Bit5,
	INT_SOURCE0_BIT_RESET_DONE_INT1_EN = Bit4,
	INT_SOURCE0_BIT_UI_DRDY_INT1_EN = Bit3,
	INT_SOURCE0_BIT_FIFO_THS_INT1_EN = Bit2,
	INT_SOURCE0_BIT_FIFO_FULL_INT1_EN = Bit1,
	INT_SOURCE0_BIT_UI_AGC_RDY_INT1_EN = Bit0,
} INT_SOURCE0_BIT;

// REG_BANK_SEL
typedef enum {
	REG_BANK_SEL_BIT_BANK_SEL_0 = 0,
	REG_BANK_SEL_BIT_BANK_SEL_1 = Bit0,
	REG_BANK_SEL_BIT_BANK_SEL_2 = Bit1,
	REG_BANK_SEL_BIT_BANK_SEL_3 = Bit1 | Bit0,
	REG_BANK_SEL_BIT_BANK_SEL_4 = Bit2,
} REG_BANK_SEL_BIT;

//---------------- BANK1 Register bits

// GYRO_CONFIG_STATIC2
typedef enum {
	GYRO_CONFIG_STATIC2_BIT_GYRO_AAF_DIS = Bit1,
	GYRO_CONFIG_STATIC2_BIT_GYRO_NF_DIS = Bit0,
} GYRO_CONFIG_STATIC2_BIT;

// GYRO_CONFIG_STATIC3
typedef enum {
	GYRO_CONFIG_STATIC3_BIT_GYRO_AAF_DELT_585HZ_SET = Bit3 | Bit2 | Bit0,
	GYRO_CONFIG_STATIC3_BIT_GYRO_AAF_DELT_585HZ_CLEAR = Bit5 | Bit4 | Bit1,
} GYRO_CONFIG_STATIC3_BIT;

// GYRO_CONFIG_STATIC4
typedef enum {
	GYRO_CONFIG_STATIC4_BIT_GYRO_AAF_DELTSQR_LSB_585HZ_SET = Bit7 | Bit5 | Bit3 | Bit1,
	GYRO_CONFIG_STATIC4_BIT_GYRO_AAF_DELTSQR_LSB_585HZ_CLEAR = Bit6 | Bit4 | Bit2 | Bit0,
} GYRO_CONFIG_STATIC4_BIT;

// GYRO_CONFIG_STATIC5
typedef enum {
	GYRO_CONFIG_STATIC5_BIT_GYRO_AAF_BITSHIFT_585HZ_SET = Bit7,
	GYRO_CONFIG_STATIC5_BIT_GYRO_AAF_BITSHIFT_585HZ_CLEAR = Bit6 | Bit5 | Bit4,
	GYRO_CONFIG_STATIC5_BIT_GYRO_AAF_DELTSQR_MSB_585HZ_SET = 0,
	GYRO_CONFIG_STATIC5_BIT_GYRO_AAF_DELTSQR_MSB_585HZ_CLEAR = Bit3 | Bit2 | Bit1 | Bit0,
} GYRO_CONFIG_STATIC5_BIT;

// INTF_CONFIG5
typedef enum {
	INTF_CONFIG5_BIT_PIN9_FUNCTION_CLKIN_SET = Bit2,
	INTF_CONFIG5_BIT_PIN9_FUNCTION_CLKIN_CLEAR = Bit1,
	INTF_CONFIG5_BIT_PIN9_FUNCTION_RESET_SET = 0,
	INTF_CONFIG5_BIT_PIN9_FUNCTION_RESET_CLEAR = Bit2 | Bit1,
} INTF_CONFIG5_BIT;

//---------------- BANK2 Register bits

// ACCEL_CONFIG_STATIC2
typedef enum {
	ACCEL_CONFIG_STATIC2_BIT_ACCEL_AAF_DELT_585HZ_SET = Bit4 | Bit3 | Bit1,
	ACCEL_CONFIG_STATIC2_BIT_ACCEL_AAF_DELT_585HZ_CLEAR = Bit6 | Bit5 | Bit2,
	ACCEL_CONFIG_STATIC2_BIT_ACCEL_AAF_DIS = Bit0,
} ACCEL_CONFIG_STATIC2_BIT;

// ACCEL_CONFIG_STATIC3
typedef enum {
	ACCEL_CONFIG_STATIC3_BIT_ACCEL_AAF_DELTSQR_LSB_585HZ_SET = Bit7 | Bit5 | Bit3 | Bit1,
	ACCEL_CONFIG_STATIC3_BIT_ACCEL_AAF_DELTSQR_LSB_585HZ_CLEAR = Bit6 | Bit4 | Bit2 | Bit0,
} ACCEL_CONFIG_STATIC3_BIT;

// ACCEL_CONFIG_STATIC4
typedef enum {
	ACCEL_CONFIG_STATIC4_BIT_ACCEL_AAF_BITSHIFT_585HZ_SET = Bit7,
	ACCEL_CONFIG_STATIC4_BIT_ACCEL_AAF_BITSHIFT_585HZ_CLEAR = Bit6 | Bit5 | Bit4,
	ACCEL_CONFIG_STATIC4_BIT_ACCEL_AAF_DELTSQR_MSB_SET = 0,
	ACCEL_CONFIG_STATIC4_BIT_ACCEL_AAF_DELTSQR_MSB_CLEAR = Bit3 | Bit2 | Bit1 | Bit0,
} ACCEL_CONFIG_STATIC4_BIT;

#define FIFO_SIZE 2048

// FIFO_DATA layout when FIFO_CONFIG1 has FIFO_GYRO_EN and FIFO_ACCEL_EN set

// Packet 4
typedef struct {
	uint8_t FIFO_Header;
	uint8_t ACCEL_DATA_X1;
	uint8_t ACCEL_DATA_X0;
	uint8_t ACCEL_DATA_Y1;
	uint8_t ACCEL_DATA_Y0;
	uint8_t ACCEL_DATA_Z1;
	uint8_t ACCEL_DATA_Z0;
	uint8_t GYRO_DATA_X1;
	uint8_t GYRO_DATA_X0;
	uint8_t GYRO_DATA_Y1;
	uint8_t GYRO_DATA_Y0;
	uint8_t GYRO_DATA_Z1;
	uint8_t GYRO_DATA_Z0;
	uint8_t TEMP_DATA1;
	uint8_t TEMP_DATA0;
	uint8_t TimeStamp_h;
	uint8_t TimeStamp_l;
	uint8_t Ext_Accel_X_Gyro_X;
	uint8_t Ext_Accel_Y_Gyro_Y;
	uint8_t Ext_Accel_Z_Gyro_Z;
} FIFO_DATA;

// With FIFO_ACCEL_EN and FIFO_GYRO_EN header should be 8’b_0110_10xx
typedef enum {
	FIFO_HEADER_BIT_HEADER_MSG = Bit7,
	FIFO_HEADER_BIT_HEADER_ACCEL = Bit6,
	FIFO_HEADER_BIT_HEADER_GYRO = Bit5,
	FIFO_HEADER_BIT_HEADER_20 = Bit4,
	FIFO_HEADER_BIT_HEADER_TIMESTAMP_FSYNC = Bit3 | Bit2,
	FIFO_HEADER_BIT_HEADER_ODR_ACCEL = Bit1,
	FIFO_HEADER_BIT_HEADER_ODR_GYRO = Bit0,
} FIFO_HEADER_BIT;

#ifdef __cplusplus
}
#endif

#endif /* _INV_ICM42688P_REGISTERS_H */

